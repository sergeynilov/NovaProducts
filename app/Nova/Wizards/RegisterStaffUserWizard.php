<?php

namespace App\Nova\Wizards;

use App\Enums\ConfigValueEnum;
use App\Enums\NovaSettingsParamEnum;
use App\Enums\UserMembershipMarkEnum;
use App\Enums\UserStatusEnum;
use App\Library\Facades\AppSettingsFacade;
use App\Models\Permission;
use App\Models\User;
use App\Models\UserProfile;
use App\Nova\Helpers\UserHelper;
use Ctessier\NovaAdvancedImageField\AdvancedImage;
use Illuminate\Database\QueryException;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Str;
use Laravel\Nova\Fields;
use Laravel\Nova\Fields\Heading;
use Laravel\Nova\Fields\MultiSelect;
use Laravel\Nova\Fields\Select;
use Laravel\Nova\Fields\Text;
use Laravel\Nova\Fields\Trix;
use Laravel\Nova\Fields\URL;
use Wdelfuego\NovaWizard\AbstractWizard;

class RegisterStaffUserWizard extends AbstractWizard
{
    public function wizardViewData(): array
    {
        $userHelper = new UserHelper();
        $filesystemDisk = ConfigValueEnum::get(ConfigValueEnum::FILESYSTEM_DISK);

        $statusOptions = UserStatusEnum::getStatusSelectionItems();
        $permissionOptions = Permission::get()->toArray();

//        \Log::info(varDump($permissionOptions, ' -1 $permissionOptions::'));
        foreach ($permissionOptions as $permissionOption) {
            $mappedPermissionOptions[$permissionOption['id']] = $permissionOption['name'];
        }

//        \Log::info(varDump($mappedPermissionOptions, ' -1 mappedPermissionOptions::'));

        return [
            'steps' => [
                [
                    'title' => 'Credentials: Step 1/4',
                    'fields' => [
                        Fields\Text::make(__('Username'), 'name')
                            ->rules('required', 'max:255')->help('Enter your name'),
                        Fields\Text::make(__('Email'), 'email')
                            ->rules('required', 'max:255')->help('Enter valid email'),

                        Heading::make('<p class="text-sm font-bold ">'.
                                      __('Password is autogenerated and send to a created staff user.').'</p>')->asHtml(),
                    ],
                ], // 'Credentials: Step 1/4',

                [
                    'title' => 'Details : Step 2/4',
                    'fields' => [
                        Select::make(__('Status'), 'status')->required()
                            ->options($statusOptions)->sortable(),
                        Select::make(__('Membership mark'), 'membership_mark')->required()
                            ->options(UserMembershipMarkEnum::getMembershipMarkSelectionItems())->sortable(),
                        Text::make(__('Phone'))->textAlign('left')
                            ->rules('nullable', 'max:100')->help('Enter your phone number'),
                        URL::make(__('Website'), 'website')->rules('nullable', 'max:255')->help('Enter valid url'),
                        Trix::make(__('Notes'), 'notes')->rules('required')
                            ->withFiles('public')->fullWidth()->stacked(),

                        AdvancedImage::make(__('Avatar'), 'avatar')
                            ->disk($filesystemDisk)
                            ->path($userHelper->getUploadDirectory())->prunable()->deletable(true)
                            ->resolveUsing(function ($avatarPath) use($userHelper, $filesystemDisk) {
                                if ($avatarPath && Storage::disk($filesystemDisk)->exists($avatarPath)) {
                                    return $avatarPath;
                                }
                                return $userHelper->getDefaultAvatar();
                            })
                            ->resize($userHelper->getAvatarResizeWidth())->croppable($userHelper->getAvatarCroppableRatio())
                            ->quality($userHelper->getAvatarQuality()),

//                        Image::make(__('Avatar'),
//                            'avatar')->disk(ConfigValueEnum::get(ConfigValueEnum::FILESYSTEM_DISK))->path('public/avatars')->prunable()->deletable(true),
                    ],
                ], // 'Details : Step 2/4'

                [
                    'title' => 'Permissions : Step 3/4',
                    'fields' => [
                        MultiSelect::make(__('Permissions'))->options($mappedPermissionOptions),
                    ], // 'Permissions : Step 3/4'
                ],
//                [
//                    'title' => 'Avatar : Step 4/4',
//                    'fields' => [
//                        Image::make('Avatar')->disk(ConfigValueEnum::get(ConfigValueEnum::FILESYSTEM_DISK))->path('public/images'),
//                    ], // 'Avatar : Step 4/4'
//                ],
            ],
        ];
    }

    public function onSubmit($formData, &$context): bool
    {
        //
        // When this method gets called, a valid and complete wizard was submitted.
        //
        // $formData is an array that contains the data submitted by the user.
        //
        // $context is an empty array that you can store arbitrary info in;
        // it will be passed to the next method so you can use it
        // to display specific context info to the user on success.

        // Parse submitted wizard data somehow

        $userActiveOnRegister = AppSettingsFacade::getValue(NovaSettingsParamEnum::USER_ACTIVE_ON_REGISTER);
//        \Log::info(varDump($userActiveOnRegister, ' -1 userActiveOnRegister::'));
//        \Log::info(varDump($formData, ' -1 $formData::'));
//        \Log::info(varDump($context, ' -1 $context::'));
        $generatedPassword = Str::password();

        $exception = '';
        try {
            DB::beginTransaction();
            $user = User::create(
                [
                    'name' => $formData['name'],
                    'email' => $formData['email'],
                    'password' => bcrypt($generatedPassword),
                    'status' => $userActiveOnRegister ? UserStatusEnum::ACTIVE : UserStatusEnum::NEW,
                ]
            );
            $context['newUserId'] = $user->id;
            $context['newUserName'] = $user->name;
            \Log::info(varDump($generatedPassword, ' -1 $generatedPassword::'));
            UserProfile::create(
                [
                    'user_id' => $user->id,
                    'membership_mark' => UserMembershipMarkEnum::NO_MEMBERSHIP,
                    'phone' => $formData['phone'],
                    'website' => $formData['website'],
                    'notes' => $formData['notes'],
                ]
            );
//            \Log::info(varDump($formData['permissions'], ' -1 $formData[permissions]::'));
//            \Log::info(varDump(json_decode($formData['permissions']), ' -123 $formData[permissions]::'));
            foreach (json_decode($formData['permissions']) as $permissionId) {
//                \Log::info(varDump($permissionId, ' -1 $permissionId::'));
                $permission = Permission::find($permissionId);
//                \Log::info(varDump($permission, ' -123 $permission::'));
                $user->givePermissionTo($permission);
            }

            DB::commit();
        } catch (QueryException|\Exception $e) {
            DB::rollBack();
            \Log::info($e->getMessage());
            $exception = $e;
        }

        if ($exception) {
            return false;
        }

        // Return true at the end of this method to indicate success
        return true;
    }

    public function successViewData($context): array
    {
//        \Log::info(varDump($context, ' -1 successViewData context::'));

        return [
            'message' => 'Successfully created new staff user "'.$context['newUserName'].'"!'
        ];
    }
}
